# This file centralizes all configuration variables for the RAG-based Airbnb review analysis project.
# It uses python-dotenv to load environment variables from a .env file, allowing for easy customization
# without modifying the source code.

import os
from dotenv import load_dotenv

# Load environment variables from a .env file in the project root.
load_dotenv()

# --- Database Configuration ---
# These settings are for connecting to the primary data source (e.g., SQL Server) where the Airbnb reviews are stored.

# The name or IP address of the SQL Server instance.
SQL_SERVER = os.getenv("SQL_SERVER", r"YASSINE\SQLEXPRESS")
# The name of the database containing the review data.
DATABASE = os.getenv("DATABASE", "AirbnbDataWarehouse")
# The file path to the MDF file of the database.
MDF_FILE_PATH = os.getenv("MDF_FILE_PATH", r"D:\SQLData\AirbnbDataWarehouse.mdf")
# The ODBC driver to use for the database connection.
ODBC_DRIVER = os.getenv("ODBC_DRIVER", "ODBC Driver 17 for SQL Server")
# The name of the table containing the review data.
TABLE = os.getenv("TABLE", "fact_reviews")
# The maximum number of reviews to load initially from the database. Set to 0 to load all reviews.
LIMIT = int(os.getenv("LIMIT", 3000))

# --- Model and Index Configuration ---
# These settings define the models and file paths for the RAG pipeline components.

# The file path where the FAISS index will be saved.
FAISS_INDEX_PATH = os.getenv("FAISS_INDEX_PATH", "reviews_hf.index")
# The name of the sentence-transformer model to use for generating embeddings.
EMBED_MODEL = os.getenv("EMBED_MODEL", "sentence-transformers/all-MiniLM-L6-v2")
# The name of the generative model to use for answering questions.
GEN_MODEL = os.getenv("GEN_MODEL", "google/gemma-2b-it")

# --- SQLite Embedding Cache Configuration ---
# These settings are for the SQLite database used to cache review embeddings, avoiding re-computation.

# The file path where the SQLite database for caching embeddings will be saved.
SQLITE_PATH = os.getenv("SQLITE_PATH", "hugging_airbnb_embeddings.db")
# The name of the column in the review data that serves as a unique identifier.
ID_COLUMN = os.getenv("ID_COLUMN", "review_id")
# The dimension of the embeddings generated by the EMBED_MODEL.
EMBEDDING_DIM = int(os.getenv("EMBEDDING_DIM", 384))
# The number of reviews to process in each batch during embedding generation.
BATCH_SIZE = int(os.getenv("BATCH_SIZE", 1000))
# The maximum number of concurrent workers to use for embedding generation (if applicable).
MAX_WORKERS = int(os.getenv("MAX_WORKERS", 5))

# --- .env File Example ---
# For easy setup, create a .env file in the project root and add the following variables,
# customizing them to your environment:
#
# SQL_SERVER="localhost\SQLEXPRESS"
# DATABASE="AirbnbDataWarehouse"
# TABLE="fact_reviews"
# LIMIT=100000
# FAISS_INDEX_PATH="reviews_hf.index"
# EMBED_MODEL="sentence-transformers/all-MiniLM-L6-v2"
# GEN_MODEL="google/gemma-2b-it"
# SQLITE_PATH="hugging_airbnb_embeddings.db"
# ID_COLUMN="review_id"
# EMBEDDING_DIM=384
# BATCH_SIZE=1000
# MAX_WORKERS=4